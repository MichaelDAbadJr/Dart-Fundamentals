 The Use of CLasses
 
 "ALL IS OBJECT."
        
        - Type System

 Classes
 
   - pillar of OOP - Object Oriented Programming
   - containers that hold data and functions that manipulate behavior of internal data
   - encapsulates functionality that manipulates internal data (state)

 Object Class

   - every Object is an instance of a Class
   - everything is a subtype of Object with the exception of Null

 Mixedin-based Inheritance

   - all classes except Object have only one super-type
   - you vacn not extend more than one super-type

 Extension Methods

   - adds extra functionality to an existing library (Module / Class / API)
   - users of an API can add functionality without changing the implementation details directly

 Class Modifiers

   - controls how a class or mix-in can be inherited and instantiated 
   - add additional restrictions:
       - from within it own library (file where the API is defined)
       - from outside its library (how API gets inherited or instantiated)

 Class Members

   - Objects only have two types members:
       - data (instance variables / member variables) mutable || immutable
       - functions (signatures / methods)

 invoke (invocation)

   - when a method is called you invoke that method upon an Object
   - methods have access to an Objects internal data and methods

 dot (.) notation

   - a syntax used in programming languages to access an objects:
       - attributes (member variables)
       - methods (functions / signatures)

Class Constructors

  - used to create Objects
  
  
Class Constructors Types:

      - Generator Constructor (Unnamed Constructor)

        - generator constructor names are identical to the class name

          - Two types of Generator Constructors:
              
              - Default Generator Constructor (Return instance of type REQUIRED)

              - Factory Generator Constructor (Return instance of type optional)
                - prefix default generator constructor with factory modifier
              

                - example: const Default Generator Constructor

                      class Point{
                        final double x;
                        final double y;
                        const Point({required this.x, required this.y});
                      }

      - Identifier Constructor (Named Constructor)
        
        - identifier constructor names are identical to the class name with an added .identiferName

        - e.g. ClassName.fromJSON

        - Two types of Generator Constructors:

            - Identifier Lists (can NOT have a function)
            - Factory Constructor (Can have a function body)

const Class

  - compile-time constant Class (immutable Class)
  - frozen at compile-time
  - object shape and data are known at compile time and will not change
  - less guess work for the compiler to do

invocation of const Class

  - if const is omitted then the instance is not flagged as a compile time constant

implicit getters

  - getters are impllicity defined when you declare a member variable in a class

// TODO: refactor

Instance Field Initialization

   - instance fields must have a value before reaching the constructor body unless prefixed with the late keyword

   - there are three ways in which an instance variable can be initialized:

     - have an initializer unpon variable declaration

     - use an initializing formal parameter (be a parameter of the constructor function)

         - e.g. ClassConstructor(this.initializingFormal)

     - be initialized in the constructor's initialization list

TODO: Add the Four Pillars of Object-Oriented Programming