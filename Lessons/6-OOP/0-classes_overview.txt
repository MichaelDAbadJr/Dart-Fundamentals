 The Use of CLasses
 
 "ALL IS OBJECT."
        
        - Type System

 Classes
 
   - pillar of OOP - Object Oriented Programming
   - containers that hold data and functions that manipulate behavior of internal data
   - encapsulates functionality that manipulates internal data (state)

 Object Class

   - every Object is an instance of a Class
   - everything is a subtype of Object with the exception of Null

 Mixedin-based Inheritance

   - all classes except Object have only one super-type
   - you vacn not extend more than one super-type

 Extension Methods

   - adds extra functionality to an existing library (Module / Class / API)
   - users of an API can add functionality without changing the implementation details directly

 Class Modifiers

   - controls how a class or mix-in can be inherited and instantiated 
   - add additional restrictions:
       - from within it own library (file where the API is defined)
       - from outside its library (how API gets inherited or instantiated)

 Class Members

   - Objects only have two types members:
       - data (instance variables / member variables) mutable || immutable
       - functions (signatures / methods)

 invoke (invocation)

   - when a method is called you invoke that method upon an Object
   - methods have access to an Objects internal data and methods

 dot (.) notation

   - a syntax used in programming languages to access an objects:
       - attributes (member variables)
       - methods (functions that manipulate behavior)

Class Constructors

  - used to create Objects
  - three types of Constructors:

      - Default Constructors (ClassName)
      - Named Constructors (ClassName.identifier - pre-defined member variables)
      - Factory Constructors (ClassName.identifier - typically for JSON data)

const Class

  - compile-time constant Class (immutable Class)
  - frozen at compile-time
  - object shape and data are known at compile time and will not change
  - less guess work for the compiler to do

invocation of const Class

  - if const is omitted then the instance is not flagged as a compile time constant