import 'dart:math';

import '../../utility/spacedPrint.dart';

void main() {
  // Generates an Iterable of length 6 using Iterable.generate(length, generator)
  final generatedIterable = Iterable.generate(
    6,
    (i) => i * 2,
  );

  // Generates an Iterable of length 6 using [0,1,2,3,...,n].map(generator) (Literal.map)
  final generatedIterableFromListLiteral = [0, 1, 2, 3, 4, 5].map(
    powerCallback,
  );

  final generatedIterableFromSetLiteral = {0, 1, 2, 3}.map(
    qouteCallback,
  );

  spacedPrint('Iterable generated by Iterable.generate: $generatedIterable', prefix_space: true);

  spacedPrint('Iterable generated by List literal: $generatedIterableFromListLiteral', prefix_space: true);

  spacedPrint('Iterable generated by Set literal: $generatedIterableFromSetLiteral', prefix_space: true);
}

int powerCallback(int index) => pow(index, 2).toInt();

String qouteCallback(int index) =>
    'Begin, to begin is half of the work; Let half still remain; Again begin this and thou will have finished.';


// Iterable.generate | Generic Named Constructor

//   - a generic named constructor of Iterable class

//   - as the identity (name) implies it is a genterator of an Iterable

//   - Iterable.generate has two parameters, the first is the desired lenth of the Iterable
//     the second is a generic generator callback that requires a positional integer parameter

//   - the callback can be a pointer to a callback or a lambda function (anonymous function)


// Using literal.map(anonymousFunction) | Set and List Literals

//   - you do not have to utilize the elements of a collection
//     in body of a callback passed to the map function

//   - you only need to take in the element in the callback

// Generating an Iterable with Iterable.generate vs [].map(anonymousFunction) or {}.map(anonymousFunction) (Literal.map)

//   - There is less boiler plate code when using Iterable.generate(n, anonymousFunction)

//   - as you do not have to explicitly define the number of elements
//     which you would have to do if using a Literal

//   - the number of elements are passed in as an argument to Iterable.generate